
import _parent_.Model._
import _file_.Objective._

val env = LocalEnvironment(2)

// Execute the workflow
// Define the population (10) and the number of generations (100).
// Define the inputs and their respective variation bounds.
// Define the objectives to minimize.
// Assign 1 percent of the computing time to reevaluating
// parameter settings to eliminate over-evaluated individuals.
val nsga2 = 
  NSGA2Evolution(
    evaluation = ants -- objective,
    genome = Seq(
      diffusion in (0.0, 99.0),
      evaporation in (0.0, 99.0)),
    objectives = Seq(deltaFood),
    termination = 1000,
    parallelism = 100,
    stochastic = Stochastic(seed = seed)
    //distribution = Island(1 hour)
  )
// Define a hook to save the Pareto frontier
val savePopulationHook = SavePopulationHook(nsga2, workDirectory / "results")

// Plug everything together to create the workflow
(nsga2 hook savePopulationHook on env)
  
  
  
  